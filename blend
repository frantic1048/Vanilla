#!/usr/bin/env nu
use std log

const not_package_name = [
  "darwin-system" # nix-darwin
  "root" # linux system config, not managed by stow
  "screenshots" # screenshots
]

# FIXME: not listing newly added dirs
let all_top_dirs: list<string> = (git ls-tree --name-only --full-name -d HEAD :/
  | lines)

let all_packages: list<string> = ($all_top_dirs | where $it not-in $not_package_name)

let home_path = $nu.home-path
let macos_application_support_path = [$home_path "Library" "Application Support"] | path join
let xdg_config_home_path = [$home_path ".config"] | path join
def make_xdg_config_subpath [subpath: string] {
  [$xdg_config_home_path $subpath] | path join
}
let stow_dir = $env.FILE_PWD

let macos_stow_table: table<package: string, prefix: string> = [
  [package prefix];
  ["bin" $home_path]
  ["git" $xdg_config_home_path]
  ["elvish" $xdg_config_home_path]
  ["nushell" $macos_application_support_path]
  ["starship" $xdg_config_home_path]
  ["proto" $home_path]
  ["vscode" ([$macos_application_support_path 'Code'] | path join)]

  # terminals
  ["alacritty" $xdg_config_home_path]
  ["kitty" $xdg_config_home_path]
  ["wezterm" $xdg_config_home_path]

  ["yabai" $xdg_config_home_path]
  ["skhd" $xdg_config_home_path]
  ["sketchybar" $xdg_config_home_path]

]
let linux_stow_table: table<package: string, prefix: string> = [
  [package prefix];
  ["git" $xdg_config_home_path]
  ["bin" $home_path]
  ["git" $xdg_config_home_path]
  ["elvish" $xdg_config_home_path]
]

let stow_profiles: table<name: string, table: table<package: string, prefix: string>> = [
  [name table];
  [macos-x86_64 $macos_stow_table]
  [linux-x86_64 $linux_stow_table]
]

def assert_stow_profile_exist [profile: string] {
  if $profile not-in ($stow_profiles | get name) {
    log error $"Error: profile ($profile) does not exist."
    exit 1
  }
}

def get_stow_profile [] -> table<name: string, table: table<package: string, prefix: string>> {
  log info "Getting stow profile..."
  let os_name = $nu | get os-info.name
  let os_arch = $nu | get os-info.arch
  let profile_name = $"($os_name)-($os_arch)"
  log info $"Expected profile: ($profile_name)"
  assert_stow_profile_exist $profile_name
  $stow_profiles | where name == $profile_name | first
}

def is_known_package [package: string] {
  $package in $all_packages
}

def assert_stow_profile_only_contains_known_items [profile: table<name: string, table: table<package: string, prefix: string>>] {
  let unknown_items = $profile | get table | where not (is_known_package $it.package)
  if ($unknown_items | length) > 0 {
    log error $"Error: in profile ($profile.name) found unknown items: ($unknown_items)"
    exit 1
  }
}

def verify [] {
  log info "Verifying stow list..."
  $stow_profiles | each {|row|
    log info $"Verifying stow list for ($row.name)..."
    assert_stow_profile_only_contains_known_items $row
  }
  log info "Stow list verified."
}

def mk_stow_rc [] {

}

def provision_essential_paths [] {
  log info "Provisioning essential paths..."
  let paths = [$xdg_config_home_path]
  $paths | each {|it|
    if not ("dir" == ($it | path type)) {
      log info $"Creating path ($it)..."
      mkdir $it
    }
  }
  log info $"Provisioned essential paths."
}

def init [] {
  provision_essential_paths
  log info $"All packages: ($all_packages)"
  verify
  log info "Initializing stow..."
  let profile = (get_stow_profile)
  log info $"Using profile: ($profile.name)"
}

def install [packages?: list<string>] {
  let profile = (get_stow_profile)
  if ($packages | length) > 0 {
    $packages | each {|package|
      if (is_known_package $package) {
        log error $"Error: package ($package) is not known."
        exit 1
      }
      let prefix = ($profile.table | where package == $package | first | get prefix)
      log info $"Stowing ($package) to ($prefix)"
      log info $"stow --dir ($stow_dir) --target ($prefix) -S ($package)"
      stow --dir $stow_dir --target $prefix -S $package
    }
  } else {
    $profile.table | each {|row|
      log info $"Stowing ($row.package) to ($row.prefix)"
      log info $"stow --dir ($stow_dir) --target ($row.prefix) -S ($row.package)"
      stow --dir $stow_dir --target $row.prefix -S $row.package
    }
  }
}

# Install package configs
def "main install" [
  ...packages: string # packages to install, default: install all available packages
  ] {
  init
  install $packages
}

# Init stow
def "main init" [] {
  init
}

# Print packages and their profiles
def "main stat" [] {
  let stat_table = ($all_packages | each {|package|
    let profiles_of_package = ($stow_profiles | each {|profile|
      if $package in ($profile.table | get package) {
        $profile.name
      }
    })
    [[package profiles]; [$package $profiles_of_package]]
  } | reduce {|it, acc| $it ++ $acc })

  $stat_table | sort-by -r profiles | update profiles {|row|
    $row.profiles | str join ", "
  }
}

def main [] {
  init
}