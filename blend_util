#!/usr/bin/env nu

# How to wrap an external command
# https://github.com/nushell/nushell/issues/7758#issuecomment-2097184688
# How to wrap an internal command with flags ???

# Possible levels of logging:
# - debug
# - info
# - warning
# - error
# - critical
# - success
# https://www.nushell.sh/book/stdout_stderr_exit_codes.html#echo-print-and-log-commands
export def log [
  level: string,
  --important (-i),
  message: string] {
  # check usable ansi styles
  # ansi -l
  let color = match $level {
    "debug" => "white_dimmed"
    "info" => {
      match $important {
        true => "default"
        _ => "default_dimmed"
      }}
    "warn" => {
      match $important {
        true => "light_yellow"
        _ => "yellow"
      }}
    "error" => {
      match $important {
        true => "light_red"
        _ => "red"
      }}
    "success" => {
      match $important {
        true => "light_green"
        _ => "green"
      }}
    _ => "reset"
  }
  print $"(ansi $color)($message)(ansi reset)"
}

export const git_files = [
  .gitignore
  .gitattributes
  .gitmodules
]

export def get_package_base_dir [] -> string {
  $env.FILE_PWD | path join "packages"
}

export def is_git_ignored [path: string] -> boolean {
  # FIXME: this method is not very efficient but works for now
  git check-ignore $path | str length | $in > 0
}

export def expand_package_dir [package_dir: string] {
  def expand_inner [dir] {
    let dir_contents = (ls $dir | where name not-in $git_files and not (is_git_ignored $it.name))
    if ($dir_contents | length) == 1 {
      let first_item = ($dir_contents | first)
      if ($first_item.type == "dir") {
        # MEMO: nushell `ls` is not the same as system's `ls`
        # @see https://www.nushell.sh/commands/docs/ls.html
        expand_inner $first_item.name
      } else {
        $first_item.name
      }
    } else {
      $dir
    }
  }

  expand_inner (get_package_base_dir | path relative-to $env.FILE_PWD | path join $package_dir)
}
